Tweet.profile:
  type: Tweet
  field: profile
  dataSource: getTweetAuthorFn
  kind: UNIT # required
  request: ./appsync/resolvers/Tweet.profile.batchInvoke.request.vtl
  response: ./appsync/resolvers/Tweet.profile.batchInvoke.response.vtl
  maxBatchSize: 25
  caching:
    keys:
      - $context.identity.username
      - $context.source.author
    ttl: 300
UnhydratedTweetsPage.tweets:
  type: UnhydratedTweetsPage
  field: tweets
  dataSource: tweetsTable
  kind: UNIT # required
  request: ./appsync/resolvers/UnhydratedTweetsPage.tweets.request.vtl
  response: ./appsync/resolvers/UnhydratedTweetsPage.tweets.response.vtl
Tweet.liked:
  type: Tweet
  field: liked
  dataSource: tweetLikesTable
  kind: UNIT # required
  request: ./appsync/resolvers/Tweet.liked.request.vtl
  response: ./appsync/resolvers/Tweet.liked.response.vtl
Tweet.retweeted:
  type: Tweet
  field: retweeted
  dataSource: retweetsTable
  kind: UNIT # required
  request: ./appsync/resolvers/Tweet.liked.request.vtl
  response: ./appsync/resolvers/Tweet.liked.response.vtl
MyProfile.tweets:
  type: MyProfile
  field: tweets
  dataSource: tweetsTable
  kind: UNIT # required
  request: ./appsync/resolvers/MyProfile.tweets.request.vtl
  response: ./appsync/resolvers/MyProfile.tweets.response.vtl
Retweet.profile:
  type: Retweet
  field: profile
  dataSource: getTweetAuthorFn
  kind: UNIT # required
  request: ./appsync/resolvers/Tweet.profile.batchInvoke.request.vtl
  response: ./appsync/resolvers/Tweet.profile.batchInvoke.response.vtl
  maxBatchSize: 25
  caching:
    keys:
      - $context.identity.username
      - $context.source.author
    ttl: 300
Retweet.retweetOf:
  type: Retweet
  field: retweetOf
  dataSource: tweetsTable
  kind: UNIT # required
  request: ./appsync/resolvers/Retweet.retweetOf.request.vtl
  response: ./appsync/resolvers/Retweet.retweetOf.response.vtl
Reply.profile:
  type: Reply
  field: profile
  dataSource: getTweetAuthorFn
  kind: UNIT # required
  request: ./appsync/resolvers/Tweet.profile.batchInvoke.request.vtl
  response: ./appsync/resolvers/Tweet.profile.batchInvoke.response.vtl
  maxBatchSize: 25
  caching:
    keys:
      - $context.identity.username
      - $context.source.author
    ttl: 300
Reply.inReplyToTweet:
  type: Reply
  field: inReplyToTweet
  dataSource: tweetsTable
  kind: UNIT # required
  request: ./appsync/resolvers/Reply.inReplyToTweet.request.vtl
  response: ./appsync/resolvers/Reply.inReplyToTweet.response.vtl
  caching:
    keys:
      - $context.identity.username
      - $context.source.inReplyToUserIds
    ttl: 300  
Reply.inReplyToUsers:
  type: Reply
  field: inReplyToUsers
  dataSource: usersTable
  kind: UNIT # required
  request: ./appsync/resolvers/Reply.inReplyToUsers.request.vtl
  response: ./appsync/resolvers/Reply.inReplyToUsers.response.vtl
Reply.liked:
  type: Reply
  field: liked
  dataSource: tweetLikesTable
  kind: UNIT # required
  request: ./appsync/resolvers/Tweet.liked.request.vtl
  response: ./appsync/resolvers/Tweet.liked.response.vtl
Reply.retweeted:
  type: Reply
  field: retweeted
  dataSource: retweetsTable
  kind: UNIT # required
  request: ./appsync/resolvers/Tweet.liked.request.vtl
  response: ./appsync/resolvers/Tweet.liked.response.vtl
OtherProfile.following:
  type: OtherProfile
  field: following
  dataSource: relationshipsTable
  kind: UNIT # required
  request: ./appsync/resolvers/OtherProfile.following.request.vtl
  response: ./appsync/resolvers/OtherProfile.following.response.vtl
OtherProfile.followedBy:
  type: OtherProfile
  field: followedBy
  dataSource: relationshipsTable
  kind: UNIT # required
  request: ./appsync/resolvers/OtherProfile.followedBy.request.vtl
  response: ./appsync/resolvers/OtherProfile.followedBy.response.vtl
OtherProfile.tweets:
  type: OtherProfile
  field: tweets
  dataSource: tweetsTable
  kind: UNIT # required
  request: ./appsync/resolvers/MyProfile.tweets.request.vtl
  response: ./appsync/resolvers/MyProfile.tweets.response.vtl
MyProfile.imgUrl:
  kind: UNIT # required
  type: MyProfile
  field: imgUrl
  dataSource: getImagePresignedUrlFn
Conversation.otherUser:
  type: Conversation
  field: otherUser
  dataSource: usersTable
  kind: UNIT # required
  request: ./appsync/resolvers/Conversation.otherUser.request.vtl
  response: ./appsync/resolvers/Conversation.otherUser.response.vtl
Message.from:
  type: Message
  field: from
  dataSource: usersTable
  kind: UNIT # required
  request: ./appsync/resolvers/Message.from.request.vtl
  response: ./appsync/resolvers/Message.from.response.vtl
