name: appsyncmasterclass

schema: './appsync/schemas/*.graphql'

authentication:
  type: 'AMAZON_COGNITO_USER_POOLS'
  config:
    awsRegion: eu-west-2 # defaults to stack region 
    defaultAction: ALLOW
    userPoolId: !Ref CgUserPool

resolvers:
  Query.getMyProfile:
    dataSource: usersTable
    kind: UNIT # required
    request: ./appsync/resolvers/Query.getMyProfile.request.vtl
    response: ./appsync/resolvers/Query.getMyProfile.response.vtl
  Mutation.editMyProfile:
    dataSource: usersTable
    kind: UNIT # required
    request: ./appsync/resolvers/Mutation.editMyProfile.request.vtl
    response: ./appsync/resolvers/Mutation.editMyProfile.response.vtl
  Query.getImageUploadUrl:
    # Direct Lambda resolver
    dataSource: getImageUploadUrlFn
    kind: UNIT # required
  Mutation.tweet:
    kind: UNIT # required
    field: tweet
    dataSource: tweetFn
  Query.getTweets:
    dataSource: tweetsTable
    kind: UNIT # required
    request: ./appsync/resolvers/Query.getTweets.request.vtl
    response: ./appsync/resolvers/Query.getTweets.response.vtl
  Query.getMyTimeline:
    dataSource: timelinesTable
    kind: UNIT # required
    request: ./appsync/resolvers/Query.getMyTimeline.request.vtl
    response: ./appsync/resolvers/Query.getMyTimeline.response.vtl
  Mutation.like:
    dataSource: tweetLikeMutation
    kind: UNIT # required
    request: ./appsync/resolvers/Mutation.like.request.vtl
    response: ./appsync/resolvers/Mutation.like.response.vtl
  Mutation.unlike:
    dataSource: tweetUnlikeMutation
    kind: UNIT # required
    request: ./appsync/resolvers/Mutation.unlike.request.vtl
    response: ./appsync/resolvers/Mutation.unlike.response.vtl
  Query.getLikes:
    dataSource: tweetLikesTable
    kind: UNIT # required
    request: ./appsync/resolvers/Query.getLikes.request.vtl
    response: ./appsync/resolvers/Query.getLikes.response.vtl
  Mutation.retweet:
    kind: UNIT # required
    field: retweet
    dataSource: retweetFn
  Mutation.unretweet:
    kind: UNIT # required
    field: unretweet
    dataSource: unretweetFn
  Mutation.reply:
    kind: UNIT # required
    field: reply
    dataSource: replyFn
  # Nested fields
  Tweet.profile:
    type: Tweet
    field: profile
    dataSource: usersTable
    kind: UNIT # required
    request: ./appsync/resolvers/Tweet.profile.request.vtl
    response: ./appsync/resolvers/Tweet.profile.response.vtl
  UnhydratedTweetsPage.tweets:
    type: UnhydratedTweetsPage
    field: tweets
    dataSource: tweetsTable
    kind: UNIT # required
    request: ./appsync/resolvers/UnhydratedTweetsPage.tweets.request.vtl
    response: ./appsync/resolvers/UnhydratedTweetsPage.tweets.response.vtl
  Tweet.liked:
    type: Tweet
    field: liked
    dataSource: tweetLikesTable
    kind: UNIT # required
    request: ./appsync/resolvers/Tweet.liked.request.vtl
    response: ./appsync/resolvers/Tweet.liked.response.vtl
  Tweet.retweeted:
    type: Tweet
    field: retweeted
    dataSource: retweetsTable
    kind: UNIT # required
    request: ./appsync/resolvers/Tweet.liked.request.vtl
    response: ./appsync/resolvers/Tweet.liked.response.vtl
  MyProfile.tweets:
    type: MyProfile
    field: tweets
    dataSource: tweetsTable
    kind: UNIT # required
    request: ./appsync/resolvers/MyProfile.tweets.request.vtl
    response: ./appsync/resolvers/MyProfile.tweets.response.vtl
  Retweet.profile:
    type: Retweet
    field: profile
    dataSource: usersTable
    kind: UNIT # required
    request: ./appsync/resolvers/Tweet.profile.request.vtl
    response: ./appsync/resolvers/Tweet.profile.response.vtl
  Retweet.retweetOf:
    type: Retweet
    field: retweetOf
    dataSource: tweetsTable
    kind: UNIT # required
    request: ./appsync/resolvers/Retweet.retweetOf.request.vtl
    response: ./appsync/resolvers/Retweet.retweetOf.response.vtl

dataSources:
  api:
    type: 'NONE'
  usersTable:
    type: AMAZON_DYNAMODB
    description: 'UsersTable'
    config:
      tableName: !Ref UsersTable
  tweetsTable:
    type: AMAZON_DYNAMODB
    description: 'TweetsTable'
    config:
      tableName: !Ref TweetsTable
  timelinesTable:
    type: AMAZON_DYNAMODB
    description: 'TimelinesTable'
    config:
      tableName: !Ref TimelinesTable
  tweetLikesTable:
    type: AMAZON_DYNAMODB
    description: "tweetLikesTable"
    config:
      tableName: !Ref TweetLikesTable
  retweetsTable:
    type: AMAZON_DYNAMODB
    description: "retweetsTable"
    config:
      tableName: !Ref RetweetsTable
  tweetLikeMutation:
    type: AMAZON_DYNAMODB
    description: "tweetLikeMutation"
    config:
      tableName: !Ref TweetLikesTable
      iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt UsersTable.Arn
          - !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
        Resource: !GetAtt TweetLikesTable.Arn
  tweetUnlikeMutation: 
    type: AMAZON_DYNAMODB
    description: "tweetUnlikeMutation"
    config:
      tableName: !Ref TweetLikesTable
      iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt UsersTable.Arn
          - !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: 
          - dynamodb:DeleteItem
        Resource: !GetAtt TweetLikesTable.Arn
  getImageUploadUrlFn:
      type: 'AWS_LAMBDA'
      config:
        functionName: getImageUploadUrl
  tweetFn:
      type: 'AWS_LAMBDA'
      config:
        functionName: tweet
  retweetFn:
      type: 'AWS_LAMBDA'
      config:
        functionName: retweet
  unretweetFn:
      type: 'AWS_LAMBDA'
      config:
        functionName: unretweet
  replyFn:
      type: 'AWS_LAMBDA'
      config:
        functionName: reply

substitutions:
  TweetsTable: !Ref TweetsTable
  TweetLikesTable: !Ref TweetLikesTable
  UsersTable: !Ref UsersTable