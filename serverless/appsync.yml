name: appsyncmasterclass

schema: './appsync/schemas/*.graphql'

authentication:
  type: 'AMAZON_COGNITO_USER_POOLS'
  config:
    awsRegion: eu-west-2 # defaults to stack region 
    defaultAction: ALLOW
    userPoolId: !Ref CgUserPool

resolvers:
  Query.getMyProfile:
    dataSource: usersTable
    kind: UNIT # required
    request: ./appsync/resolvers/Query.getMyProfile.request.vtl
    response: ./appsync/resolvers/Query.getMyProfile.response.vtl
  Mutation.editMyProfile:
    dataSource: usersTable
    kind: UNIT # required
    request: ./appsync/resolvers/Mutation.editMyProfile.request.vtl
    response: ./appsync/resolvers/Mutation.editMyProfile.response.vtl
  Query.getImageUploadUrl:
    # Direct Lambda resolver
    dataSource: getImageUploadUrlFn
    kind: UNIT # required
  Mutation.tweet:
    kind: UNIT # required
    field: tweet
    dataSource: tweetFn
  Query.getTweets:
    dataSource: tweetsTable
    kind: UNIT # required
    request: ./appsync/resolvers/Query.getTweets.request.vtl
    response: ./appsync/resolvers/Query.getTweets.response.vtl
  # Nested fields
  Tweet.profile:
    type: Tweet
    field: profile
    dataSource: usersTable
    kind: UNIT # required
    request: ./appsync/resolvers/Tweet.profile.request.vtl
    response: ./appsync/resolvers/Tweet.profile.response.vtl

dataSources:
  api:
    type: 'NONE'
  usersTable:
    type: AMAZON_DYNAMODB
    description: 'UsersTable'
    config:
      tableName: !Ref UsersTable
  tweetsTable:
    type: AMAZON_DYNAMODB
    description: 'TweetsTable'
    config:
      tableName: !Ref TweetsTable
  getImageUploadUrlFn:
      type: 'AWS_LAMBDA'
      config:
        functionName: getImageUploadUrl
  tweetFn:
      type: 'AWS_LAMBDA'
      config:
        functionName: tweet