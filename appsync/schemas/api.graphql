schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {

    getImageUploadUrl(extension: String, contentType: String): ImageUploadUrlRes

    getMyProfile: MyProfile!

    getMyTimeline(limit: Int!, nextToken: String): UnhydratedTweetsPage!

    getProfile(screenName: String!): OtherProfile

    getTweets(userId: ID!, limit: Int!, nextToken: String): TweetsPage!

    getLikes(userId: ID!, limit: Int!, nextToken: String): UnhydratedTweetsPage!

    getFollowers(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!

    getFollowing(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!

    search(query: String!, mode: SearchMode!, limit: Int!, nextToken: String): SearchResultsPage!

    searchHashtags(hashtags: String!, mode: HashtagsMode!, limit: Int!, nextToken: String): HashtagsResultsPage!

    listConversations(limit: Int!, nextToken: String): ConversationsPage!

    getDirectMessages(otherUserId: ID!, limit: Int!, nextToken: String): MessagesPage!
}

type Mutation {
    editMyProfile(newProfile: ProfileInput!): MyProfile!
    tweet(text: String!): Tweet!
    like(tweetId: ID!): Boolean!
    unlike(tweetId: ID!): Boolean!
    retweet(tweetId: ID!): Retweet!
    unretweet(tweetId: ID!): Boolean!
    reply(tweetId: ID!, text: String!): Reply!
    follow(userId: ID!): Boolean!
    unfollow(userId: ID!): Boolean!
    sendDirectMessage(otherUserId: ID!, message: String!): Conversation!

    notifyRetweeted(id: ID!, userId: ID!, tweetId: ID!, retweetedBy: ID!, retweetId: ID!): Notification 
    @aws_iam
    
    notifyLiked(id: ID!, userId: ID!, tweetId: ID!, likedBy: ID!): Notification 
    @aws_iam
    
    notifyMentioned(id: ID!, userId: ID!, mentionedBy: ID!, mentionedByTweetId: ID!): Notification 
    @aws_iam
    
    notifyReplied(id: ID!, userId: ID!, tweetId: ID!, replyTweetId: ID!, repliedBy: ID!): Notification 
    @aws_iam
}

type Subscription {
    onNotified(userId: ID!, type: NotificationType): Notification
    @aws_subscribe(mutations: ["notifyRetweeted", "notifyLiked", "notifyMentioned", "notifyReplied"])
}

enum SearchMode {
    Top
    Latest
    People
    Photos
    Videos
}

enum HashtagsMode {
    Top
    Latest
    People
    Photos
    Videos
}

input ProfileInput {
    name: String!
    imgUrl: AWSURL
    bgImgUrl: AWSURL
    bio: String
    location: String
    website: String
    birthdate: AWSDate
}

interface ITweet {
    id: ID!
    profile: IProfile!
    createdAt: AWSDateTime!
}

type Tweet implements ITweet {
    id: ID!
    profile: IProfile!
    createdAt: AWSDateTime!
    text: String!
    replies: Int!
    likes: Int!
    retweets: Int!
    liked: Boolean!
    retweeted: Boolean!
}

type Reply implements ITweet {
    id: ID!
    profile: IProfile!
    createdAt: AWSDateTime!
    text:String!
    replies: Int!
    likes: Int!
    retweets: Int!
    liked: Boolean!
    retweeted: Boolean!
    inReplyToTweet: ITweet!
    inReplyToUsers: [IProfile!]
}

type Retweet implements ITweet {
    id: ID!
    profile: IProfile!
    createdAt: AWSDateTime!
    retweetOf: ITweet!
}

interface IProfile {
    id: ID!
    name: String!
    screenName: String!
    imgUrl: AWSURL
    bgImgUrl: AWSURL
    bio: String
    location: String
    website: String
    birthdate: AWSDate
    createdAt: AWSDateTime!
    tweets: TweetsPage!
    followersCount: Int!,
    followingCount: Int!,
    tweetsCount: Int!,
    likesCount: Int!,
}

type MyProfile implements IProfile {
    id: ID!
    name: String!
    screenName: String!
    imgUrl: AWSURL
    bgImgUrl: AWSURL
    bio: String
    location: String
    website: String
    birthdate: AWSDate
    createdAt: AWSDateTime!
    tweets: TweetsPage!
    followersCount: Int!,
    followingCount: Int!,
    tweetsCount: Int!,
    likesCount: Int!,
}

type OtherProfile implements IProfile {
    id: ID!
    name: String!
    screenName: String!
    imgUrl: AWSURL
    bgImgUrl: AWSURL
    bio: String
    location: String
    website: String
    birthdate: AWSDate
    createdAt: AWSDateTime!
    tweets: TweetsPage!
    followersCount: Int!,
    followingCount: Int!,
    tweetsCount: Int!,
    likesCount: Int!,
    following: Boolean!
    followedBy: Boolean!
}

type TweetsPage {
    tweets: [ITweet!]
    nextToken: String
}

type UnhydratedTweetsPage {
    tweets: [ITweet!]
    nextToken: String
}

type ProfilesPage {
    profiles: [IProfile!]
    nextToken: String
}

type ImageUploadUrlRes {
    url: AWSURL!
    fileKey: String!
}

union SearchResult = MyProfile | OtherProfile | Tweet | Reply

type SearchResultsPage {
    results: [SearchResult!]
    nextToken: String
}

union HashtagResult = MyProfile | OtherProfile | Tweet | Reply

type HashtagsResultsPage {
    results: [HashtagResult!]
    nextToken: String
}

enum NotificationType {
    Retweeted,
    Liked,
    Mentioned,
    Replied
}

type Retweeted implements iNotification @aws_iam @aws_cognito_user_pools {
    id: ID! 
    type: NotificationType!
    userId: ID!
    tweetId: ID!
    retweetedBy: ID!
    retweetId: ID!
    createdAt: AWSDateTime! 
}

type Liked implements iNotification @aws_iam @aws_cognito_user_pools {
    id: ID!
    type: NotificationType!
    userId: ID!
    tweetId: ID!
    likedBy: ID!
    createdAt: AWSDateTime!
}

type Mentioned implements iNotification @aws_iam @aws_cognito_user_pools {
    id: ID!
    type: NotificationType!
    userId: ID!
    mentionedBy: ID!
    mentionedByTweetId: ID!
    createdAt: AWSDateTime!
}

type Replied implements iNotification @aws_iam @aws_cognito_user_pools {
    id: ID!
    type: NotificationType!
    userId: ID!
    tweetId: ID!
    replyTweetId: ID!
    repliedBy: ID!
    createdAt: AWSDateTime!
}

union Notification = Retweeted | Liked | Mentioned | Replied

interface iNotification {
    id: ID!
    type: NotificationType!
    userId: ID!
    createdAt: AWSDateTime!
}

type Conversation {
    id: ID!
    otherUser: OtherProfile!
    lastMessage: String!
    lastModified: AWSDateTime!
}

type ConversationsPage {
    conversations: [Conversation!]
    nextToken: String
}

type Message {
    messageId: ID!
    from: IProfile!
    message: String!
    timestamp: AWSDateTime!
}

type MessagesPage {
    messages: [Message!]
    nextToken: String
}