service: appsyncmasterclass-backend
frameworkVersion: "3"

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-2 
  stage: 'dev'
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    STAGE: ${self:custom.stage}
    REGION: ${self:provider.region}

package:
  exclude: 
    - package-lock.json
    - package.json

appSync: ${file(./serverless/appsync.yml)}

custom:
  stage: ${opt:stage, self:provider.stage}

functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table
          - Key: CanIDelete
            Value: 'No'
          - Key: Author
            Value: 'Alan Ionita'
          - Key: CreatedOn
            Value: 2025-03-04
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
            RequireLowercase: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name  
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn
    CgSignupPerm:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceAccount: !Ref AWS::AccountId
        SourceArn: !GetAtt CognitoUserPool.Arn
    WebUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            UserPoolId: !Ref CognitoUserPool
            ClientName: web
            PreventUserExistenceErrors: ENABLED
            ExplicitAuthFlows:
              - ALLOW_USER_SRP_AUTH
              - ALLOW_USER_PASSWORD_AUTH
              - ALLOW_REFRESH_TOKEN_AUTH
  Outputs:
    CognitoUserPoolId:
      Description: "Cognito User Pool ::"
      Value: !Ref CognitoUserPool
    WebCognitoUserPoolClientId:
      Value: !Ref WebUserPoolClient
    AppsyncMasterclassHTTPUrl:
      Value: ${appsync:url}
